[project]
name = "aibi"
version = "0.1.0"
description = "ChatBI Autocomplete Service - A chat application based on Large Language Models with intelligent autocomplete"
readme = "README.md"
authors = [
    { name = "whoishu", email = "whoishu@users.noreply.github.com" }
]
requires-python = ">=3.8"
dependencies = [
    "fastapi>=0.109.2",
    "uvicorn[standard]>=0.27.0",
    "pydantic>=2.6.0",
    "pydantic-settings>=2.1.0",
    "opensearch-py>=2.4.2",
    "python-multipart>=0.0.18",
    "python-jose[cryptography]>=3.4.0",
    "sentence-transformers>=2.3.1",
    "numpy>=1.24.3,<2.0.0",
    "redis>=5.0.1",
    "PyYAML>=6.0.1",
]

[project.optional-dependencies]
dev = [
    "black>=24.0.0",
    "ruff>=0.1.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py38"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"scripts/verify_installation.py" = ["F401"]  # Imports are used for verification
"app/api/routes.py" = ["B904"]  # HTTPException conversions are intentional

[tool.ruff.lint.isort]
known-third-party = ["fastapi", "pydantic", "opensearchpy", "redis"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["app"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
